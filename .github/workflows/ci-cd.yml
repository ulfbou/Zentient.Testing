name: CI/CD

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ develop, 'release/*' ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  SOLUTION: Zentient.Testing.sln
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Build & Test (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0.x', '9.0.x' ]
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK (matrix)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Ensure .NET 9.0.100 installed (satisfy global.json)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-${{ hashFiles('**/*.csproj', '**/Directory.Pack.props', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Quick packability validation (non-fatal)
        run: |
          set -euo pipefail
          echo "Checking IsPackable flags (warnings only)"
          missing=0
          for proj in $(git ls-files 'src/**/*.csproj' 'src/*.csproj'); do
            if ! grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              echo "WARNING: $proj missing explicit <IsPackable>true</IsPackable>"
              missing=1
            fi
          done
          for tproj in $(git ls-files 'tests/**/*.csproj' 'tests/*.csproj'); do
            if ! grep -q '<IsPackable>false</IsPackable>' "$tproj"; then
              echo "WARNING: test project $tproj missing explicit <IsPackable>false</IsPackable>"
              missing=1
            fi
          done
          if [ $missing -eq 1 ]; then
            echo "Packability check produced warnings; see repo policy. This does not block CI."
          fi

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ${{ env.SOLUTION }} --configuration Release --no-build --logger trx --results-directory tests/TestResults || (echo "Tests failed" && exit 1)

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: tests/TestResults/

  release:
    name: Pack, Sign, Publish & Release
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDKs for packing/signing
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.100
            8.0.x

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Install GitVersion
        uses: GitTools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'

      - name: Run GitVersion
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v0.9.14

      - name: Persist computed version
        id: set_version
        run: |
          set -euo pipefail
          echo "GitVersion outputs:"
          echo "  SemVer: ${{ steps.gitversion.outputs.SemVer }}"
          echo "  NuGetVersionV2: ${{ steps.gitversion.outputs.NuGetVersionV2 }}"
          ver=${{ steps.gitversion.outputs.NuGetVersionV2 }}
          if [ -z "$ver" ]; then ver=${{ steps.gitversion.outputs.SemVer }}; fi
          ver=$(printf "%s" "$ver" | tr -d '\r')

          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "$ver" > version.txt
          echo "Written version.txt:"; cat version.txt

      - name: Verify version consistency
        run: |
          set -euo pipefail
          ver=${{ steps.set_version.outputs.version }}
          tag=${GITHUB_REF#refs/tags/}
          
          echo "Computed version: $ver, tag: $tag"
          
          # This regex matches a valid SemVer with an optional 'v' prefix
          # It now correctly handles prerelease labels like alpha and beta
          if [[ ! "$tag" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Error: Git tag ($tag) is not a valid Semantic Version."
            exit 1
          fi

          # Strip the 'v' from the tag for comparison
          tag_no_v=$(echo "$tag" | sed 's/^v//')
          
          if [[ "$tag_no_v" != "$ver" ]]; then
            echo "Tag ($tag) does not match computed version ($ver). Aborting to avoid accidental publish."
            exit 1
          fi
          
          echo "Version consistency verified. Tag ($tag) matches computed version ($ver)."

      - name: Create artifacts dir
        run: mkdir -p artifacts

      - name: Clean artifacts dir (remove stale packages)
        run: rm -rf artifacts/*.nupkg artifacts/*.snupkg || true

      - name: Build solution for packing
        run: dotnet build ${{ env.SOLUTION }} -c Release

      - name: Pack projects (use GitVersion-generated version)
        run: |
          set -euo pipefail
          set -x
          # Read raw computed version (may include prerelease suffix like -alfa.1)
          ver_raw=$(tr -d '\r\n' < version.txt)

          # Use the raw version (keep prerelease suffix intact) for PackageVersion
          ver="$ver_raw"
          echo "Using full version for packaging: $ver"
          echo "$ver" > version.txt

          # Derive VersionPrefix (base X.Y.Z) from the version for VersionPrefix
          base_ver=$(echo "$ver" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+' || true)
          if [ -z "$base_ver" ]; then echo "ERROR: Failed to extract base version"; exit 1; fi

          failed=0
          for proj in $(git ls-files 'src/**/*.csproj' 'src/*.csproj'); do
            if grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              echo "Packing $proj with Version=$ver"
              dotnet pack "$proj" -c Release -o artifacts -p:Version="$ver" -p:PackageVersion="$ver" -p:VersionPrefix="$base_ver" --include-symbols --include-source || { echo "Pack failed for $proj"; failed=1; }
            else
              echo "Skipping non-packable $proj"
            fi
          done
          if [ "$failed" -ne 0 ]; then echo "One or more projects failed to pack"; exit 1; fi

      - name: Inspect and validate package versions
        run: |
          set -euo pipefail
          echo "Listing artifacts"
          ls -la artifacts || true
          ver=$(cat version.txt)
          failed=0
          for f in artifacts/*.nupkg; do
            echo "-- $f --"
            unzip -p "$f" *.nuspec || true
            nuspec_ver=$(unzip -p "$f" *.nuspec | sed -n 's:.*<version>\(.*\)</version>.*:\1:p' | tr -d '\r' | head -n1 || true)
            echo "nuspec version: ${nuspec_ver:-<none>} computed version: $ver"
            if [ -z "$nuspec_ver" ]; then
              echo "ERROR: Could not determine nuspec version for $f" >&2
              failed=1
            elif [ "$nuspec_ver" != "$ver" ] && [ "$nuspec_ver" != "v$ver" ]; then
              echo "ERROR: Package $f version ($nuspec_ver) does not match computed version ($ver)" >&2
              failed=1
            else
              echo "Package $f version matches computed version"
            fi
          done
          if [ "$failed" -ne 0 ]; then echo "Package validation failed"; exit 1; fi

      - name: Sign packages (if key available)
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${SIGNING_KEY:-}" ]; then
            echo "No SIGNING_KEY configured; skipping signing."; exit 0
          fi
          printf '%s' "$SIGNING_KEY" | base64 -d > signing-cert.pfx
          chmod 600 signing-cert.pfx
          TIMESTAMP_SERVER="http://timestamp.digicert.com"
          for pkg in artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              dotnet nuget sign "$pkg" --certificate-path signing-cert.pfx --certificate-password "${SIGNING_PASSWORD:-}" --timestamper "$TIMESTAMP_SERVER" || echo "Warning: signing failed for $pkg"
            fi
          done
          for sym in artifacts/*.snupkg; do
            if [ -f "$sym" ]; then
              dotnet nuget sign "$sym" --certificate-path signing-cert.pfx --certificate-password "${SIGNING_PASSWORD:-}" --timestamper "$TIMESTAMP_SERVER" || echo "Warning: signing failed for $sym"
            fi
          done
          shred -u signing-cert.pfx || rm -f signing-cert.pfx || true

      - name: Push packages to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY:-}" ]; then
            echo "No NUGET_API_KEY configured; skipping push to NuGet."; exit 0
          fi

          pushed=0
          for pkg in artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              echo "Pushing $pkg"
              dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || { echo "Failed to push $pkg"; exit 1; }
              pushed=$((pushed+1))
            fi
          done
          if [ "$pushed" -eq 0 ]; then echo "No packages found to push"; fi

      - name: Prepare release assets
        run: |
          set -euo pipefail
          mkdir -p release_assets
          for f in artifacts/*; do cp "$f" release_assets/ || true; done
          if [ -f CHANGELOG.md ]; then cp CHANGELOG.md release_assets/CHANGELOG.md; else echo "Release triggered by $GITHUB_REF" > release_assets/CHANGELOG.md; fi
          if [ -f LICENSE ]; then cp LICENSE release_assets/LICENSE; else echo "MIT License - placeholder" > release_assets/LICENSE; fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
          body_path: release_assets/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
